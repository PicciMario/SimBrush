SimBrush - reporter tool
Mario Piccinelli <mario.piccinelli@gmail.com>

The reporter tool is the last tool in the SimBrush examination chain. It is the one in charge with reading the wrapped xml file (the output of the wrapper tool) and creating with the data it contains a report in PDF format.

CARVER
|
| original (carved) file
|
WRAPPER
|
| wrapped file
|
REPORTER
|
| pdf report

----- USING THE REPORTER -------------------------------------------------

The reporter is launched from the command line. It has one mandatory option (-f) to specify the wrapped XML file to work on. Other options are optional.

Other options:

-o filename: Specifies the name of the PDF file produced as output
-h: Shows online help
-v: Verbose mode (for debug purposes)
-m filename: specifies the name of the MD5 file created by the wrapper
-c filename: specifies the name of the original (unwrapped) file
-i filename: specifies the name of the XML file containing investigation data

----- MD5 CHECK ----------------------------------------------------------

The reporter tool provides another layer of integrity check to the data analyzed. It is known that:

- The carving tool creates an original file and a MD5 file of it.
- The wrapping tool checks for integrity the original file versus its MD5 file.
- In the wrapped file it is provided the MD5 value discussed before as an attribute HASH in the MF tag.

The reporter tool, for what concerns the wrapped file:
- reads (if present) the MD5 data from the wrapped file and displays it in the cover page of the report.
- it can also accept an external MD5 file. If both the MD5s are provided, they are checked for consistency. If they are not identical, a warning is shown and the MD5 file prevails.
And for what concerns the original file:
- it can also accept the name of the original file; in that case it calculates the MD5 of the file and displays it in the cover page.
If both the previous cases are present:
- it checks whether the calculated MD5 and the passed one (either by exteral MD5 file or in the wrapped file) are consistent.

In a normal case it is not needed to provide a MD5 file. The integrity check should be made between the MD5 in the wrapped file and the MD5 calculated from the original file. This way we can be sure the original file has not been modified after the calculation of the wrapped version.

----- INVESTIGATION DATA FILE FORMAT -------------------------------------

It must be a valid XML file, something like this:

<XML>
<TAG> content </TAG>
....
</XML>

The supported tags are:
- case_number (Case number)
- case_name (Case Name)     
- inv_name (Investigator name)    
- sim_number (SIM number)     
- sim_desc (SIM description) 

----- WRAPPED XML DATA STRUCTURE -----------------------------------------

The wrapped xml file must have the following structure:

OPT node
- MF node
--- header for top level (one element)
--- EF nodes
--- other nodes (DF_7F10   DF_7F20)
----- header (one element)
----- EF nodes
----- other nodes (DF_5F3C   DF_5F70)
------- header (one element)
------- EF nodes

So we provided only four fixed levels of gerarchy: the top level (just the main header), the EF files in the main level (must be EF files, for example ICCID and ELP), other files (for example DF_7F10 and DF_7F20), which in turn contains a header and can hold EF files or different files, which can again contain only EF files. It is not provided the code to arrange a gerarchy of more than these levels, so for now the third level nodes MUST contain just EF files.

The header data must follow these rules:
- the name of the node is "header"
- is always contained in the element it belongs to
- can contain an arbitrary number of elements, each of them is defined by a name (the name of the tag) and a data field (the content of the tag.
  example: 
	<header>
		<ID>6F3A</ID>
		<SIZE>7000</SIZE>

An EF file always starts as: <EF><NAME description="description">, where NAME is the name of the EF file and description is the text which describes the file in the report.

An EF file s content can be organized in two mutual exclusive ways:
- <content> text nodes: they contain a block of text, in which the special sequence ### is seen as a newline.
  If a node content contains the reserved word "Empty" then it is regarded as empty and not reported in the output document.
- <content> complex nodes: content nodes with an underlying structure, like:
	<content>
		<field1>text1</field1>
		<field2>text2</field2>
  In this case the tool will create a table like this:
  
  Field name     | Field content
  ---------------------------------
  field1         | text1
  field2         | text2
  
  it is recommended to use this kind of notation for representing complex content.

